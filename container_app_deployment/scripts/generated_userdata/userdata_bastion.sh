#!/bin/bash
# Samsung Cloud Platform v2 - Bastion Server UserData
# Auto-generated by k8s_config_manager.ps1
# Generated: 2025-09-16 15:38:58
# Includes PostgreSQL DBaaS initialization

set -e

# Color functions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

log_info() { echo -e "init{BLUE}[INFO]init{NC} init1"; }
log_success() { echo -e "init{GREEN}[SUCCESS]init{NC} init1"; }
log_error() { echo -e "init{RED}[ERROR]init{NC} init1"; }
log_warning() { echo -e "init{YELLOW}[WARNING]init{NC} init1"; }
log_db() { echo -e "init{CYAN}[DATABASE]init{NC} init1"; }

# Error handling function
handle_error() {
    local exit_code=init?
    local line_number=init1
    log_error "Script failed at line initline_number with exit code initexit_code"
    log_error "Check /var/log/cloud-init-output.log for detailed error information"
    echo "init(date): ERROR - Script failed at line initline_number with exit code initexit_code" >> /var/log/bastion-setup.log
    exit initexit_code
}

# Set error trap
trap 'handle_error initLINENO' ERR

log_info "=========================================="
log_info "Samsung Cloud Platform v2 - Bastion Setup"
log_info "=========================================="
log_info "Timestamp: init(date)"
log_info "User: init(whoami)"
log_info "Working directory: init(pwd)"
log_info "=========================================="

# Wait for network connectivity with timeout
log_info "Checking network connectivity..."
connectivity_timeout=300  # 5 minutes
connectivity_start=init(date +%s)

until curl -s --connect-timeout 5 http://www.google.com >/dev/null 2>&1; do
    current_time=init(date +%s)
    elapsed=init((current_time - connectivity_start))

    if [ initelapsed -gt initconnectivity_timeout ]; then
        log_error "Network connectivity timeout after 5 minutes"
        exit 1
    fi

    log_warning "Waiting for network connectivity... (init{elapsed}s elapsed)"
    sleep 10
done
log_success "Network connectivity confirmed"

# Wait for package manager to be ready
log_info "Waiting for package manager to be ready..."
for i in {1..30}; do
    if fuser /var/lib/rpm/.rpm.lock 2>/dev/null; then
        log_warning "Package manager is locked, waiting... (attempt initi/30)"
        sleep 10
    else
        log_success "Package manager is ready"
        break
    fi
done

# Install git and PostgreSQL client (priority installation)
log_info "Installing git and PostgreSQL client..."
for i in {1..3}; do
    log_info "Software installation attempt initi/3..."

    if dnf clean all && dnf makecache && dnf install -y git postgresql jq; then
        log_success "Git and PostgreSQL client installed successfully"
        break
    else
        if [ initi -eq 3 ]; then
            log_error "Software installation failed after 3 attempts"
            exit 1
        else
            log_warning "Installation attempt initi failed, retrying in 30 seconds..."
            sleep 30
        fi
    fi
done

# Verify installations
if ! command -v git &> /dev/null; then
    log_error "Git command not found after installation"
    exit 1
fi

if ! command -v psql &> /dev/null; then
    log_error "PostgreSQL client not found after installation"
    exit 1
fi

if ! command -v jq &> /dev/null; then
    log_error "jq command not found after installation"
    exit 1
fi

log_success "Git version: init(git --version)"
log_success "PostgreSQL client version: init(psql --version)"
log_success "jq version: init(jq --version)"

# Change to home directory
cd /home/rocky

# Remove existing repository if present
if [ -d "advance_cloudnative" ]; then
    log_warning "Directory advance_cloudnative already exists, removing..."
    rm -rf advance_cloudnative
fi

# Clone the repository with retry logic
log_info "Cloning advance_cloudnative repository..."
for i in {1..3}; do
    log_info "Repository clone attempt initi/3..."

    if git clone https://github.com/SCPv2/advance_cloudnative.git; then
        log_success "Repository cloned successfully"
        break
    else
        if [ initi -eq 3 ]; then
            log_error "Repository clone failed after 3 attempts"
            exit 1
        else
            log_warning "Clone attempt initi failed, retrying in 30 seconds..."
            sleep 30
        fi
    fi
done

# Verify repository structure
log_info "Verifying repository structure..."
if [ ! -d "advance_cloudnative/container_app_deployment/k8s_app_deployment" ]; then
    log_error "Expected directory structure not found in cloned repository"
    log_error "Current directory: init(pwd)"
    log_error "Available directories:"
    ls -la advance_cloudnative/ || log_error "advance_cloudnative directory not found"
    exit 1
fi
log_success "Repository structure verified successfully"

# Set proper ownership
chown -R rocky:rocky advance_cloudnative

# Navigate to k8s deployment directory
cd advance_cloudnative/container_app_deployment/k8s_app_deployment

# Initialize PostgreSQL Database Schema
log_db "=========================================="
log_db "PostgreSQL Database Initialization"
log_db "=========================================="

# Database configuration from variables
DB_HOST="10.1.3.100"
DB_PORT="2866"
DB_NAME="cedb"
DB_USER="cedbadmin"
DB_PASSWORD="cedbadmin123!"
PRIVATE_DOMAIN="your_private_domain.name"

log_db "Database Configuration:"
log_db "  Host: initDB_HOST"
log_db "  Port: initDB_PORT"
log_db "  Database: initDB_NAME"
log_db "  User: initDB_USER"

# Wait for PostgreSQL DBaaS to be ready
log_db "Waiting for PostgreSQL DBaaS to be ready..."
db_timeout=300  # 5 minutes
db_start=init(date +%s)

until PGPASSWORD="initDB_PASSWORD" psql -h "initDB_HOST" -p "initDB_PORT" -U "initDB_USER" -d "initDB_NAME" -c "SELECT 1;" >/dev/null 2>&1; do
    current_time=init(date +%s)
    elapsed=init((current_time - db_start))

    if [ initelapsed -gt initdb_timeout ]; then
        log_error "Database connection timeout after 5 minutes"
        log_error "Please check if PostgreSQL DBaaS is running and accessible"
        exit 1
    fi

    log_warning "Waiting for database connection... (init{elapsed}s elapsed)"
    sleep 10
done
log_success "Database connection established"

# Check if PostgreSQL schema file exists
SCHEMA_FILE="scripts/postgresql_dbaas_init_schema.sql"
if [ ! -f "initSCHEMA_FILE" ]; then
    log_error "PostgreSQL schema file not found: initSCHEMA_FILE"
    log_error "Expected file in: init(pwd)/initSCHEMA_FILE"
    exit 1
fi

log_db "Found PostgreSQL schema file: initSCHEMA_FILE"

# Execute PostgreSQL schema initialization
log_db "Executing PostgreSQL schema initialization..."
if PGPASSWORD="initDB_PASSWORD" psql -h "initDB_HOST" -p "initDB_PORT" -U "initDB_USER" -d "initDB_NAME" -f "initSCHEMA_FILE"; then
    log_success "✅ PostgreSQL schema initialized successfully"
else
    log_error "❌ PostgreSQL schema initialization failed"
    exit 1
fi

# Verify schema installation
log_db "Verifying schema installation..."
table_count=init(PGPASSWORD="initDB_PASSWORD" psql -h "initDB_HOST" -p "initDB_PORT" -U "initDB_USER" -d "initDB_NAME" -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_name IN ('products', 'inventory', 'orders');" 2>/dev/null | tr -d ' ')

if [ "inittable_count" = "3" ]; then
    log_success "✅ Database schema verification passed (3 tables found)"

    # Verify initial data
    product_count=init(PGPASSWORD="initDB_PASSWORD" psql -h "initDB_HOST" -p "initDB_PORT" -U "initDB_USER" -d "initDB_NAME" -t -c "SELECT COUNT(*) FROM products;" 2>/dev/null | tr -d ' ')
    inventory_count=init(PGPASSWORD="initDB_PASSWORD" psql -h "initDB_HOST" -p "initDB_PORT" -U "initDB_USER" -d "initDB_NAME" -t -c "SELECT COUNT(*) FROM inventory;" 2>/dev/null | tr -d ' ')

    log_success "✅ Initial data verification:"
    log_success "  Products: initproduct_count records"
    log_success "  Inventory: initinventory_count records"
else
    log_error "❌ Database schema verification failed (expected 3 tables, found inittable_count)"
    exit 1
fi

log_db "PostgreSQL DBaaS initialization completed successfully!"
log_db "=========================================="

# Install Docker
log_info "Installing Docker..."
dnf config-manager --add-repo https://download.docker.com/linux/rhel/docker-ce.repo
dnf install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
systemctl start docker
systemctl enable --now docker
usermod -aG docker rocky
log_success "Docker installation completed"

# Install kubectl
log_info "Installing kubectl..."
curl -LO "https://dl.k8s.io/release/v1.28.0/bin/linux/amd64/kubectl"
chmod +x kubectl
mv kubectl /usr/local/bin/
log_success "kubectl installation completed"

# Create setup-deployment.sh with actual values
log_info "Creating setup-deployment.sh with user values..."
cat > /home/rocky/advance_cloudnative/container_app_deployment/k8s_app_deployment/setup-deployment.sh << 'SETUP_SCRIPT_EOF'
#!/bin/bash
# Samsung Cloud Platform v2 - Kubernetes Deployment Setup Script
# This script is executed on the bastion server to deploy the k8s application
# It processes template files and applies user-specific configurations
#
# Usage: ./setup-deployment.sh
#
# This script will be generated with actual values by env_setup.ps1 and
# included in bastion userdata for automatic execution

set -e

# Color functions for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }

# User variables (will be replaced by env_setup.ps1)
PRIVATE_DOMAIN="your_private_domain.name"
PUBLIC_DOMAIN="your_public_domain.name"
OBJECT_STORAGE_ACCESS_KEY="put_your_authentificate_access_key_here"
OBJECT_STORAGE_SECRET_KEY="put_your_authentificate_secret_key_here"
OBJECT_STORAGE_BUCKET_ID="put_your_account_id_here"
CONTAINER_REGISTRY_ENDPOINT="your-registry-endpoint.scr.private.kr-east1.e.samsungsdscloud.com"
USER_PUBLIC_IP="your_public_ip/32"
KEYPAIR_NAME="mykey"

# Fixed values
OBJECT_STORAGE_BUCKET_NAME="ceweb"
OBJECT_STORAGE_REGION="kr-west-1"
OBJECT_STORAGE_PRIVATE_ENDPOINT="https://object-store.private.kr-west1.e.samsungsdscloud.com"
OBJECT_STORAGE_PUBLIC_ENDPOINT="https://object-store.kr-west1.e.samsungsdscloud.com"
DB_HOST="db.${PRIVATE_DOMAIN}"
DB_PASSWORD="cedbadmin123!"
DB_USER="cedbadmin"
NAMESPACE="creative-energy"

log_info "=========================================="
log_info "Starting Kubernetes Deployment Setup"
log_info "=========================================="
log_info "Private Domain: ${PRIVATE_DOMAIN}"
log_info "Public Domain: ${PUBLIC_DOMAIN}"
log_info "Container Registry: ${CONTAINER_REGISTRY_ENDPOINT}"
log_info "=========================================="

# kubectl check removed - will be configured manually
log_warning "Skipping kubectl check - please ensure kubectl/kubeconfig is configured manually"

# Navigate to the k8s deployment directory
cd /home/rocky/advance_cloudnative/container_app_deployment/k8s_app_deployment

log_info "Processing ALL template files with user values..."

# 1. Process template files (.template -> actual files)
log_info "Processing template files..."
for template_file in $(find . -name "*.template" -type f | grep -v "setup-deployment.sh.template"); do
    output_file="${template_file%.template}"
    log_info "Processing: $template_file -> $output_file"
    cp "$template_file" "$output_file"
done

# 2. Update ConfigMap with correct domains
log_info "Updating ConfigMap..."
sed -i "s|your_public_domain.name|${PUBLIC_DOMAIN}|g" k8s-manifests/configmap.yaml
sed -i "s|your_private_domain.name|${PRIVATE_DOMAIN}|g" k8s-manifests/configmap.yaml

# 3. Update external-db-service.yaml
log_info "Updating external database service..."
sed -i "s|your_private_domain.name|${PRIVATE_DOMAIN}|g" k8s-manifests/external-db-service.yaml
sed -i "s|cesvc.net|${PRIVATE_DOMAIN}|g" k8s-manifests/external-db-service.yaml

# 4. Update deployments with container registry
log_info "Updating deployments with container registry..."
if [ -f k8s-manifests/app-deployment.yaml ]; then
    sed -i "s|your-registry-endpoint.scr.private.kr-east1.e.samsungsdscloud.com|${CONTAINER_REGISTRY_ENDPOINT}|g" k8s-manifests/app-deployment.yaml
    sed -i "s|myregistry-[a-zA-Z0-9\-]*\.scr\.private\.[a-zA-Z0-9\-]*\.e\.samsungsdscloud\.com|${CONTAINER_REGISTRY_ENDPOINT}|g" k8s-manifests/app-deployment.yaml
fi
if [ -f k8s-manifests/web-deployment.yaml ]; then
    sed -i "s|your-registry-endpoint.scr.private.kr-east1.e.samsungsdscloud.com|${CONTAINER_REGISTRY_ENDPOINT}|g" k8s-manifests/web-deployment.yaml
    sed -i "s|myregistry-[a-zA-Z0-9\-]*\.scr\.private\.[a-zA-Z0-9\-]*\.e\.samsungsdscloud\.com|${CONTAINER_REGISTRY_ENDPOINT}|g" k8s-manifests/web-deployment.yaml
fi

# 5. Update build scripts with container registry
log_info "Updating build scripts..."
for script_file in scripts/build-images.sh scripts/push-images.sh scripts/build-app-gitbased.sh scripts/deploy-from-bastion.sh; do
    if [ -f "$script_file" ]; then
        log_info "Updating script: $script_file"
        sed -i "s|your-registry-endpoint.scr.private.kr-east1.e.samsungsdscloud.com|${CONTAINER_REGISTRY_ENDPOINT}|g" "$script_file"
        sed -i "s|myregistry-[a-zA-Z0-9\-]*\.scr\.private\.[a-zA-Z0-9\-]*\.e\.samsungsdscloud\.com|${CONTAINER_REGISTRY_ENDPOINT}|g" "$script_file"
    fi
done

# 6. Update Dockerfile with Object Storage variables
log_info "Updating Dockerfile..."
if [ -f dockerfiles/Dockerfile.app ]; then
    log_info "Updating Dockerfile.app with Object Storage configuration"
    sed -i "s|put_your_authentificate_access_key_here|${OBJECT_STORAGE_ACCESS_KEY}|g" dockerfiles/Dockerfile.app
    sed -i "s|put_your_authentificate_secret_key_here|${OBJECT_STORAGE_SECRET_KEY}|g" dockerfiles/Dockerfile.app
    sed -i "s|{{OBJECT_STORAGE_BUCKET_NAME}}|${OBJECT_STORAGE_BUCKET_NAME}|g" dockerfiles/Dockerfile.app
    sed -i "s|put_your_account_id_here|${OBJECT_STORAGE_BUCKET_ID}|g" dockerfiles/Dockerfile.app
    sed -i "s|{{OBJECT_STORAGE_ENDPOINT}}|${OBJECT_STORAGE_PRIVATE_ENDPOINT}|g" dockerfiles/Dockerfile.app
    sed -i "s|your_public_domain.name|${PUBLIC_DOMAIN}|g" dockerfiles/Dockerfile.app
    sed -i "s|your_private_domain.name|${PRIVATE_DOMAIN}|g" dockerfiles/Dockerfile.app
fi

# 7. Registry credentials setup will be done manually after Container Registry ACL configuration
log_info "Skipping registry credentials setup..."
log_warning "Registry credentials must be configured manually after VM is added to Container Registry ACL"
log_warning "Please run './scripts/setup-registry-credentials.sh' after configuring Container Registry ACL"

# 8. Update nginx-ingress-controller.yaml
log_info "Updating Ingress controller..."
if [ -f nginx-ingress-controller.yaml ]; then
    sed -i "s|your_public_domain.name|${PUBLIC_DOMAIN}|g" nginx-ingress-controller.yaml
    sed -i "s|your_private_domain.name|${PRIVATE_DOMAIN}|g" nginx-ingress-controller.yaml
fi

# 9. Create master_config.json
log_info "Creating master_config.json..."
cat > /tmp/master_config.json << EOF
{
  "object_storage": {
    "access_key_id": "${OBJECT_STORAGE_ACCESS_KEY}",
    "secret_access_key": "${OBJECT_STORAGE_SECRET_KEY}",
    "region": "${OBJECT_STORAGE_REGION}",
    "bucket_name": "${OBJECT_STORAGE_BUCKET_NAME}",
    "bucket_string": "${OBJECT_STORAGE_BUCKET_ID}",
    "private_endpoint": "${OBJECT_STORAGE_PRIVATE_ENDPOINT}",
    "public_endpoint": "${OBJECT_STORAGE_PUBLIC_ENDPOINT}",
    "folders": {
      "media": "media/img",
      "audition": "files/audition"
    }
  },
  "infrastructure": {
    "domain": {
      "public_domain_name": "${PUBLIC_DOMAIN}",
      "private_domain_name": "${PRIVATE_DOMAIN}"
    },
    "database": {
      "host": "${DB_HOST}",
      "port": "2866",
      "name": "cedb",
      "user": "${DB_USER}"
    },
    "container_registry": {
      "endpoint": "${CONTAINER_REGISTRY_ENDPOINT}",
      "region": "kr-west-1"
    }
  }
}
EOF

# 10. Create master-config ConfigMap YAML
log_info "Creating master-config ConfigMap YAML..."
cat > k8s-manifests/master-config-configmap.yaml << EOF
apiVersion: v1
kind: ConfigMap
metadata:
  name: master-config
  namespace: ${NAMESPACE}
data:
  master_config.json: |
$(cat /tmp/master_config.json | sed 's/^/    /')
EOF

log_success "=========================================="
log_success "Configuration Processing Completed!"
log_success "=========================================="
log_info "All template files have been updated with your values:"
log_info "  ✅ Template files processed (.template -> actual files)"
log_info "  ✅ ConfigMaps updated with domains"
log_info "  ✅ External DB service configured"
log_info "  ✅ Container registry endpoints set"
log_info "  ✅ Build scripts updated"
log_info "  ✅ Dockerfile updated with Object Storage config"
log_info "  ✅ Master config generated"
log_info ""
log_warning "=========================================="
log_warning "NEXT STEP: MANUAL KUBERNETES DEPLOYMENT"
log_warning "=========================================="
log_info "📋 Please follow these steps to deploy:"
log_info ""
log_info "1. Create namespace:"
log_info "   kubectl create namespace ${NAMESPACE}"
log_info ""
log_info "2. Apply configurations (in order):"
log_info "   kubectl apply -f k8s-manifests/configmap.yaml"
log_info "   kubectl apply -f k8s-manifests/master-config-configmap.yaml"
log_info "   kubectl apply -f k8s-manifests/secret.yaml"
log_info ""
log_info "3. Apply infrastructure:"
log_info "   kubectl apply -f k8s-manifests/pvc.yaml"
log_info "   kubectl apply -f k8s-manifests/external-db-service.yaml"
log_info "   kubectl apply -f k8s-manifests/service.yaml"
log_info ""
log_info "4. Deploy applications:"
log_info "   kubectl apply -f k8s-manifests/web-deployment.yaml"
log_info "   kubectl apply -f k8s-manifests/app-deployment.yaml"
log_info ""
log_info "5. (Optional) Apply Ingress:"
log_info "   kubectl apply -f nginx-ingress-controller.yaml"
log_info ""
log_info "📖 For detailed instructions, see: README.md"
log_info ""
log_info "Configuration Summary:"
log_info "  - Namespace: ${NAMESPACE}"
log_info "  - Public Domain: ${PUBLIC_DOMAIN}"
log_info "  - Private Domain: ${PRIVATE_DOMAIN}"
log_info "  - Container Registry: ${CONTAINER_REGISTRY_ENDPOINT}"
log_info "  - Database: ${DB_HOST}"
log_info ""
log_success "After deployment, access your application at:"
log_success "  → http://www.${PUBLIC_DOMAIN}"
log_success "  → http://${PUBLIC_DOMAIN}"
SETUP_SCRIPT_EOF

# Make script executable and set ownership
chmod +x /home/rocky/advance_cloudnative/container_app_deployment/k8s_app_deployment/setup-deployment.sh
chown rocky:rocky /home/rocky/advance_cloudnative/container_app_deployment/k8s_app_deployment/setup-deployment.sh

# Verify setup script was created properly
if [ ! -f /home/rocky/advance_cloudnative/container_app_deployment/k8s_app_deployment/setup-deployment.sh ]; then
    log_error "Failed to create setup-deployment.sh"
    exit 1
fi

# Execute setup script as rocky user
log_info "Executing setup-deployment.sh..."
if sudo -u rocky bash -c "cd /home/rocky/advance_cloudnative/container_app_deployment/k8s_app_deployment && ./setup-deployment.sh"; then
    log_success "Setup script executed successfully"
else
    log_error "Setup script execution failed"
    exit 1
fi

# Final verification
log_info "Performing final verification..."
if [ -f advance_cloudnative/container_app_deployment/k8s_app_deployment/k8s-manifests/configmap.yaml ] && [ -f advance_cloudnative/container_app_deployment/k8s_app_deployment/k8s-manifests/master-config-configmap.yaml ]; then
    log_success "Configuration files verified successfully"
else
    log_error "Configuration files not found after setup"
    exit 1
fi

log_success "=========================================="
log_success "Bastion setup completed successfully!"
log_success "=========================================="
log_info "Setup Summary:"
log_info "  - Repository cloned to: /home/rocky/advance_cloudnative"
log_info "  - Configuration processed with user values"
log_info "  - All K8s manifests updated and ready for deployment"
log_info ""
log_info "Configuration files ready for deployment:"
log_info "  ✅ ConfigMap with domain configuration"
log_info "  ✅ Master config with Object Storage settings"
log_info "  ✅ External database service"
log_info "  ✅ Deployment manifests with container registry"
log_info "  ✅ PostgreSQL DBaaS schema initialized with sample data"
log_info ""
log_info "Database initialization summary:"
log_info "  ✅ PostgreSQL client installed and configured"
log_info "  ✅ Database connection established to DBaaS"
log_info "  ✅ Schema created (products, inventory, orders tables)"
log_info "  ✅ Initial data loaded (8 products, 8 inventory records)"
log_info "  ✅ Database functions and triggers configured"
log_info ""
log_info "Next steps:"
log_info "1. SSH to this bastion server: ssh rocky@init(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)"
log_info "2. Navigate to: cd /home/rocky/advance_cloudnative/container_app_deployment/k8s_app_deployment"
log_info "3. Follow the manual deployment steps in README.md"
log_info "4. Start with: kubectl create namespace creative-energy"
log_info "5. Database is ready - app servers will connect automatically"
log_info "=========================================="

# Final system update
log_info "Performing final system update..."
for i in {1..3}; do
    log_info "System update attempt initi/3..."

    if dnf clean all && dnf makecache && dnf update -y; then
        log_success "System packages updated successfully"
        break
    else
        if [ initi -eq 3 ]; then
            log_warning "System update failed after 3 attempts, but setup is complete"
        else
            log_warning "System update attempt initi failed, retrying in 30 seconds..."
            sleep 30
        fi
    fi
done

# Log successful completion
echo "init(date): Bastion userdata execution completed successfully" >> /var/log/bastion-setup.log